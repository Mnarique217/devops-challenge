pipeline {
    agent any
    environment {
        REGISTRY = '192.168.49.1:5000'
        APP_GIT_HASH =''
        RELEASE_NAME="app"
        NAMESPACE="default"
    }
    parameters {
        choice (name: "REPOSITORY", choices: ['https://github.com/Mnarique217/devops-challenge.git'],description: "repository to build")
    }

    stages {
        stage('CHECKOUT') {
            steps {
                dir('build'){
                    git branch: 'feature/jenkins', url: params.REPOSITORY
                }
            }
        }

        stage('STATIC-CODE-ANALISIS') {
            steps {
                dir('build'){
                sh '''
                    tfsec ./terraform
                '''
                }
            }
        }

        stage('BUILD') {
            steps {
                script{
                    dir('build'){
                        // ref: https://gist.github.com/JonathanTurnock/1035f716aa8f3ccec886a9bf17df7218
                        // env.APP_GIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        // def tag = ""
                    sh """
                        cd application
                        buildah bud --format=docker -f ./Dockerfile -t ${env.REGISTRY}/app:${env.BUILD_NUMBER}
                        buildah --tls-verify=false push ${env.REGISTRY}/app:${env.BUILD_NUMBER}
                    """
                    }
                }
            }
        }

        stage('SECURITY-SCANNING') {
            steps {
                dir('build'){
                sh """
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --no-progress ${env.REGISTRY}/app:${env.BUILD_NUMBER}
                """
                }
            }
        }

        stage('DEPLOYMENT') {
            steps {
                dir('build/kubernetes/helm-chart'){
                    withCredentials([file(credentialsId: 'kube-config', variable: 'KUBE_CONFIG')]) {
                    sh """
                    export KUBECONFIG=$KUBE_CONFIG
                    kubectl config use-context staging

                    if helm status "${env.RELEASE_NAME}" -n "${env.NAMESPACE}" >/dev/null 2>&1; then
                        echo "Release exists. Performing helm upgrade..."
                        helm upgrade "${env.RELEASE_NAME}" . --namespace "${env.NAMESPACE}" --set image.tag=${env.BUILD_NUMBER}
                    else
                        echo "Release not found. Performing helm install..."
                        helm install "${env.RELEASE_NAME}" . --namespace "${env.NAMESPACE}" --set image.tag=${env.BUILD_NUMBER}
                    fi
                    """           
                    }                    
                }
            }
        }

        stage('ROLLBACK') {
            steps {
                dir('build'){
                sh '''
                    kubectl 
                    helm
                '''
                }
            }
        }
    }
}